echo "# Bitcoin-Linear-Regression" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/norkesherpa/Bitcoin-Linear-Regression.git
git push -u origin main


!conda install numpy pytorch torchvision cpuonly -c pytorch -y
!pip install matplotlib --upgrade --quiet
!pip install jovian --upgrade --quiet
!pip install pandas


import pandas as pd
import datetime
import jovian
import pandas_datareader.data as web
from pandas import Series, DataFrame
import torch
import torchvision
import torch.nn.functional as F
import torch.nn as nn
from torch.utils.data import DataLoader, TensorDataset, random_split
import matplotlib.pyplot as plt
from torch.utils.data import random_split
from torchvision.datasets.utils import download_url





start = datetime.datetime(2010, 1, 1)
end = datetime.datetime(2020, 1, 1)

dataframe = web.DataReader("AAPL","yahoo",start, end)
dataframe.tail()

project_name='Norkes Bitcoin linear regression'

jovian.commit(project= 'Norkes Bitcoin linear regression', environment=None)
dataframe[['Close']].plot()
plt.title('Apple')
plt.show()    

dataframe.head()
num_rows = len(dataframe)
print(num_rows)
num_cols = len(dataframe.columns)
print(num_cols)
input_cols = ['Open','Low','High']
print (input_cols)
output_cols = ['Close']
jovian.commit(project= 'Norkes Bitcoin stock linear regression', environment=None)

def dataframe_to_arrays(dataframe):
    # This makes a copy of the original dataframe
    dataframe1 = dataframe.copy(deep=True)
    # Extract input & outupts as numpy arrays
    inputs_array = dataframe1[input_cols].to_numpy()
    targets_array = dataframe1[output_cols].to_numpy()
    return inputs_array, targets_array
    
inputs_array, targets_array = dataframe_to_arrays(dataframe)
inputs_array, targets_array

inputs = torch.tensor(inputs_array, dtype = torch.float32)
targets = torch.tensor(targets_array, dtype = torch.float32)

inputs.dtype, targets.dtype

dataset = TensorDataset(inputs, targets)

val_percent = 0.15 
val_size = int(num_rows * val_percent)
train_size = num_rows - val_size


train_ds, val_ds = random_split(dataset,[train_size,val_size])

batch_size = 30

train_loader = DataLoader(train_ds, batch_size, shuffle=True)
val_loader = DataLoader(val_ds, batch_size)

for xb, yb in train_loader:
    print("inputs:", xb)
    print("targets:", yb)
    break
    
jovian.commit(project=project_name, environment=None)

input_size = len(input_cols)
output_size = len(output_cols)

class StockModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.linear = nn.Linear(input_size, output_size)                  
        
    def forward(self, xb):
        out = self.linear(xb)                         
        return out
    
    def training_step(self, batch):
        inputs, targets = batch 
        # Generate predictions
        out = self(inputs)          
        # Calcuate loss
        loss = F.l1_loss(out, targets)                        
        return loss
    
    def validation_step(self, batch):
        inputs, targets = batch
        # Generate predictions
        out = self(inputs)
        # Calculate loss
        loss = F.l1_loss(out, targets)                             
        return {'val_loss': loss.detach()}
        
    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   
        return {'val_loss': epoch_loss.item()}
    
    def epoch_end(self, epoch, result, num_epochs):
        # Print result every 20th epoch
        if (epoch+1) % 20 == 0 or epoch == num_epochs-1:
            print("Epoch [{}], val_loss: {:.4f}".format(epoch+1, result['val_loss']))

model = StockModel()

list(model.parameters())

jovian.commit(project=project_name, environment=None)

def evaluate(model, val_loader):
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):
    history = []
    optimizer = opt_func(model.parameters(), lr)
    for epoch in range(epochs):
        # Training Phase 
        for batch in train_loader:
            loss = model.training_step(batch)
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
        # Validation phase
        result = evaluate(model, val_loader)
        model.epoch_end(epoch, result, epochs)
        history.append(result)
    return history
    
result = evaluate(model,val_loader) 
print(result)

epochs = 100
lr = 1e-2
history1 = fit(epochs, lr, model, train_loader, val_loader)

epochs = 200
lr = 1e-3
history2 = fit(epochs, lr, model, train_loader, val_loader)

epochs = 500
lr = 1e-4
history3 = fit(epochs, lr, model, train_loader, val_loader)

epochs = 1000
lr = 1e-5
history4 = fit(epochs, lr, model, train_loader, val_loader)

epochs = 1000
lr = 1e-6
history5 = fit(epochs, lr, model, train_loader, val_loader)

val_loss = evaluate(model,val_loader)
print(val_loss)

jovian.log_metrics(val_loss=val_loss)

jovian.commit(project=project_name, environment=None)

def predict_single(input, target, model):
    inputs = input.unsqueeze(0)
    predictions = model(inputs)               
    prediction = predictions[0].detach()
    print("Input:", input)
    print("Target:", target)
    print("Prediction:", prediction)
    
input, target = val_ds[0]
predict_single(input, target, model)


input, target = val_ds[10]
predict_single(input, target, model)

input, target = val_ds[23]
predict_single(input, target, model)

jovian.commit(project=project_name, environment=None)
jovian.commit(project=project_name, environment=None)
